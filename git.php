git --version // посмотреть какая версия git установленна на компьютер

git config --global user.name "Evgeniy Melnikov" // устанавливаем имя пользователя
git config --global user.email "jonrun89bit@gmail.ru" // устанавливаем e-mail пользователя

git config --list // проверка настроек

pwd // путь к папке в которой мы находимся

cd путь/   // перейти в папку
ls -la // показывает файлы, которые находяться в папке
git status // статус гит репозитория, показывает есть ли репазиторий в текущей папки
git init // создаем репазиторий в папке
git add .// добавить все файлы на сохранение в репозиторий
git add js/actions.js // подготавливаем фаил к сохранению в репозиторий
git commit -m "Skillbox"// сораняем папки в репазиторий

git show // показывает инфу о последнем коммите
что бы выйти из команды git show, нужно нажать q

git log // просмотр последних изменений в репазитории

.gitignore 
// файлы с таким именем будут игнарироваться гитом
// так же, в этом файле храняться именна тех файлов, которые не нужно отслеживать
// эти файлы всегда храняться у нас на компьютере и не передаются через гит
// *.log указывает на то, что файлы с расширением .log будут игнарироваться репазиториумом
// logs/ такой указатель в файле говорит об игнорировании папки

/*
errors.log
// фаил игнарируемый репозиториумом

*.log //
// расширение указывает на то, что все файлы с разширением .log
// будут игнарироваться репазиториумом

logs/
// позволяет игнарировать папку

logs/*.logs
!logs/sample.log
// отменяем игнарирования файла sample.log, лежащего в папке log
*/


/* vs code
при установленном расширении Git History нажимаем "F1" и вводим "git history", в меню выбираем
"Git History (log)" и у нас открывается фаил с историей операций с git
*/

// клонируем удаленный репазиторий (в папку где нет локального репазитория)
git clone https://github.com/jonrun2018/lesson.git 
// путь копируем из репазитория, нажав на кнопку "code"

// связываем наш репазиторий с удаленным
git remote add origin https://github.com/jonrun2018/skillbox.git

// перемещаем наш репазиторий на сервер
git push -u origin master // при первой отправке на сервер
git push 

// узнаем путь до нашего репазитория
git remote -v 

// удаляем текущий путь к репазиторию
git remote remove origin

// затягиваем изменения с сервера
git pull

// выход из окна комфликта версий с сохранением коммита
// просто набираем команду
:wq

// создаем новую ветку catalog-filter
git branch catalog-filter

// переключаемся в ветку master
git checkout master

// перключаемся на ветку baske-delivery-options (которая автомотически создалась)
git checkout -b baske-delivery-options

// показывает какие ветки существуют в текущем репазитории
git branch

// посмотреть все ветки, в том числе и удаленные
git branch -a

// создаем имеющуюся ветку baske-delivery-options на сервере репазитория
git push -u origin baske-delivery-options

//сбросить кеш
git rm --cached . -rf

//перейти в предыдущую папку
cd ../ 


// создаем новый репазиторий с именем new-project-2 и с файлами репазитория skillbox
git clone https://github.com/jonrun2018/skillbox.git new-project-2

// загружаем ветку с сервера на локальный репозиторий
git switch имя ветки

// отложить не закомиченные изменения 
git stash

// вернуть отложенные изменения. Возвращает изменнения по одному начиная с последнего. Можно востановить в другой ветке
git stash pop

// посмотреть список отложенных изменений
git stash list

// удаляем отложенные изменения (stash). 0 - индекс stasha
git stash drop 0

// сливаем ветку new-contacts в текущую
git merge new-contacts

// отмена cлияния (merge)
git reset --hard

// устанавливаем meld в git в качестве слияния по умолчанию
git config --global merge.tool meld
git config --global mergetool.meld.path "C:\Program Files\Meld\Meld.exe"

// открываем редактор meld
git mergetool

// просмотр сделаных изменений в файле index.html
git diff index.html

// просмотр сделаных изменений во всех файлах
git diff

// сравнения между последним комитом (9f8b429eaecea18d790bbf1752f3fd1af711b119) с более ранним камитом (81419a6ad3f3788660009d3e0eab7e118682d4f0)
// в файле index.html. Числовые значения камитов получены с помощью команды git log
// числовые значения коммитов не обязательно указывать полностью, достаточно первых четырех символов
git diff 81419a6ad3f3788660009d3e0eab7e118682d4f0 9f8b429eaecea18d790bbf1752f3fd1af711b119 index.html

// просмотр изменений между коммитоми во всех файлах
git diff 81419a6ad3f3788660009d3e0eab7e118682d4f0 9f8b429eaecea18d790bbf1752f3fd1af711b119

// сравнивать коммиты можно из разных веток

// так же можно сравнить файлы, не относящиеся к git вообще
git diff index.html undex2.html

// просмотр всех изменений файла index.html
git blame index.html


/* Удаляют файлы безвозвратно, не подлежат востановлению

// удаление незакомичиных изменений в файле index.html
git restore index.html

// удаление всех незакомиченых изменений, в том числе и тех которые были добавлены в индекс (git add .)
// не удаляет вновь созданные файлы, которые еще не были в индексе
git reset --hard

// возвращаем фаил index.html из индекса (git add . - добовление в индекс)
git restore --staged index.html

// удаляет вce незакомиченные изменения, в том числе и вновь созданые файлы которые еще не были в индексе (git add .)
git clean -f

*/

// возвращаем фаил confirm.json из коммита, предворительно добавив его в .gitignor
// параметр --cached говорит о том что мы перестаем его отслеживать
git rm --cached confirm.json

// возвращаем фаил test.html к коммиту 3397e5e54d0b56405e0f9b689d07a79706ad9049 (все следующие коммиты онулируются)
git checkout 3397e5e54d test.html

// возвращаем фаил test.html к помледнему сделанному коммиту
git restore --staged test.html

// отменяем коммит 6d818c1376 (можно отменять как последний, так и любой другой коммит)
git revert 6d818c1376

// для того что бы отменить несколько коммитов нужно выполнить последовательно несколько команд. --no-commit позволяет сделать один коментарий в конце
git revert --no-commit <имя коммита>

// сбрасываем измененя о предпоследнего коммита (76ee3a16). Все изменения отправляются в индекс (git add .)
git reset --soft 76ee3a16

// сбрасываем измененя о предпоследнего коммита (76ee3a16). HEAD~1 означает что мы сбрасываем 1 коммит.
//  Изменения не попадают в индекс, остоваясь просто в проекте
git reset HEAD~1
git reset --mixed HEAD~1
git reset --mixed 76ee3a16

// сбрасываем изменения до предпоследнего коммита (76ee3a16)
// последний коммит будет удален
git reset --hard 76ee3a16

// изменяем сообщение последнего коммита на "text"
git commit --amend -m "text" 

// добавляем фаил в последний коммит. фаил должен находиться в индексе (git add .)
git commit --amend --no-edit

// отмена слияния веток. 3c30577 хеш комита до которого мы срезаем изменения
// 3c30577 коммит до слияния веток
git reset --merge 3c30577

// отменяем слияние веток при конфликте
git merge --abort

// переименновваем ветку в hotfixes
git branch -m hotfixes

// удаляем ветку hotfixes. Удаление происходит после слияния с другой веткой, иначе будет ошибка
git branch -D hotfixes

// посмотреть авторов сделаных изменений в файле index.html
git blame index.html

// удаляем изменения в файлах которые не отслеживаются гитом
git clean -f

// создаем новый фаил fun.php
touch fun.php 

// создаем папку fun_php
mkdir fun_php

// удаляем фаил fun.php
rm fun.php

// удаляем папку js
rmdir js